You are building a super-simple web app named "Grocery Finder".

Tech:
- Next.js (App Router) + TypeScript
- Tailwind CSS
- Fetches a Supabase Edge Function at: process.env.NEXT_PUBLIC_SUPABASE_URL + "/functions/v1/search"
- Auth: none (public demo). Use the anon key in the Authorization header.

Requirements:
- Single page at "/" with:
  - Centered card
  - Text input with placeholder "Search products…"
  - Debounce input by 300ms. Query fires when length >= 2.
  - Show a small "Searching…" loader when the request is in flight.
  - Render results as a clean list: product name (bold), optional price if returned.
  - Empty state: "No matches yet. Try 'milk' or 'pasta'."
  - Error state banner with error message.

- API Contract (from Edge Function):
  POST /search
    body: { q: string, limit?: number }
    returns: { results: Array<{ id: number, name: string, price_cents?: number }> }

- Implementation notes:
  - Read env vars NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY.
  - Use fetch with headers:
      Authorization: `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`
      Content-Type: application/json
  - On each response, guard for non-200 and show error state.

- Styling:
  - Minimal Tailwind. Full-width input up to max-w-xl, rounded-lg, subtle shadow.
  - Results: zebra rows on hover.

- DX:
  - Provide a .env.example with NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY.
  - Add npm scripts: dev, build, start, lint.
  - Include a short README explaining how to run locally.

Deliverables:
- A Next.js repo ready to run locally with `pnpm dev` (or npm/yarn).
- A single React server component page with a client component for the search box.
- Type-safe fetch wrapper for the search call.
